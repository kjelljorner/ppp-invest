rule manuscript:
    input:
        qmd="manuscript/manuscript.qmd",
        variables="manuscript/_variables.yml",
        params="manuscript/_params.yml",
        references="manuscript/references.bib",
        figures_qualitative=[
            "results/figures/azaphenalene_orbitals.png",
            "results/figures/azaphenalene_excitations.png",
            "results/figures/pentalene_orbitals.png",
            "results/figures/pentalene_excitations.png",
            "results/figures/pentalene_ideal_orbitals.png",
            "results/figures/pentalene_ideal_excitations.png",
        ],
        figure_toc="data/figures/TOC.pdf",
        figure_dsp="data/figures/dynamic_spin_polarization.pdf",
        figures_local=[
            "results/figures/local_azaphenalenes.pdf",
            "results/figures/local_azulenes.pdf",
            "results/figures/local_corr.pdf",
        ],
        figures_global=[
            "results/figures/global_all.pdf",
            "results/figures/global_all_gaps.pdf",
            "results/figures/global_scaffolds_gaps.png",
            "results/figures/global_scaffolds_oscillator.png",
            "results/figures/global_scaffolds_singlet.png",
            "results/figures/global_scaffolds_triplet.png",
        ],
        figures_garner=[
            "results/figures/garner_gaps.pdf",
        ],
        figures_negative=[
            "results/figures/negative_all.pdf",
            "results/figures/negative_scaffolds.png",
        ],
        figures_opt=[
            "results/figures/opt_corr.pdf",
            "results/figures/opt_gap.pdf",
        ],
        tables_local=[
            "results/tables/local_azaphenalenes.md",
            "results/tables/local_azulenes.md",
        ],
        tables_global=[
            "results/tables/global_all_gaps.md",
            "results/tables/global_scaffolds.md",
        ],
        tables_garner=[
            "results/tables/garner_gaps.md",
        ],
        tables_negative=[
            "results/tables/negative.md",
        ],
        tables_parameters=["results/tables/parameters.md"],
        tables_opt=["results/tables/opt.md"],
    conda:
        "envs/coulson.yml"
    output:
        "manuscript/manuscript.pdf",
    shell:
        "quarto render {input.qmd} --execute-params {input.params}"


rule concatenate_variables:
    input:
        "data/variables/variables.yml",
        "results/variables/qualitative.yml",
        "results/variables/local.yml",
        "results/variables/global.yml",
        "results/variables/garner.yml",
        "results/variables/time.yml",
        "results/variables/negative.yml",
        "results/variables/interpolation.yml",
        "results/variables/timing.yml",
        "results/variables/opt.yml",
    output:
        "manuscript/_variables.yml",
    shell:
        "cat {input} > {output}"


rule concatenate_params:
    input:
        "results/params/local.yml",
        "results/params/global.yml",
        "results/params/garner.yml",
        "results/params/negative.yml",
        "results/params/parameters.yml",
        "results/params/opt.yml",
    output:
        "manuscript/_params.yml",
    shell:
        "cat {input} > {output}"


rule parameters:
    input:
        path="resources/xyz/",
        utils=workflow.source_path("notebooks/utils.py"),
    output:
        params="results/params/parameters.yml",
        table="results/tables/parameters.md",
    conda:
        "envs/coulson.yml"
    notebook:
        "notebooks/parameters.ipynb"


rule opt:
    input:
        data_dft="results/azaphenalenes.csv",
        data_mmff="results/azaphenalenes_mmff.csv",
        data_gfnff="results/azaphenalenes_gfnff.csv",
        data_gfn2="results/azaphenalenes_gfn2.csv",
        data_ani1ccx="results/azaphenalenes_ani1ccx.csv",
        data_ref="data/reference/azaphenalenes.csv",
        utils=workflow.source_path("notebooks/utils.py"),
    output:
        params="results/params/opt.yml",
        variables="results/variables/opt.yml",
        figure_corr="results/figures/opt_corr.pdf",
        figure_gap="results/figures/opt_gap.pdf",
        table="results/tables/opt.md",
    log:
        notebook="logs/notebooks/opt.ipynb",
    conda:
        "envs/coulson.yml"
    notebook:
        "notebooks/opt.ipynb"


rule timing:
    input:
        xyz_dir="resources/xyz/azaphenalenes",
        utils=workflow.source_path("notebooks/utils.py"),
    output:
        variables="results/variables/timing.yml",
    log:
        notebook="logs/notebooks/timing.ipynb",
    threads: workflow.cores
    conda:
        "envs/coulson.yml"
    notebook:
        "notebooks/timing.ipynb"


rule interpolation:
    input:
        data_interpolation="results/azaphenalenes.csv",
        data_no_interpolation="results/azaphenalenes_no_interpolation.csv",
        reference="data/reference/azaphenalenes.csv",
        utils=workflow.source_path("notebooks/utils.py"),
    output:
        variables="results/variables/interpolation.yml",
        figure_interpolation="results/figures/interpolation.pdf",
    log:
        notebook="logs/notebooks/interpolation.ipynb",
    conda:
        "envs/coulson.yml"
    notebook:
        "notebooks/interpolation.ipynb"


rule garner:
    input:
        data_non_alternants="results/garner_non_alternants.csv",
        reference_non_alternants="data/reference/garner_non_alternants.csv",
        data_avoided_symmetry="results/garner_avoided_symmetry.csv",
        reference_avoided_symmetry="data/reference/garner_avoided_symmetry.csv",
        data_substituted="results/garner_substituted.csv",
        reference_substituted="data/reference/garner_substituted.csv",
        reference_rational="data/reference/rational_design.csv",
        xyz_non_alternants="resources/xyz/garner_non_alternants",
        xyz_avoided_symmetry="resources/xyz/garner_avoided_symmetry",
        xyz_substituted="resources/xyz/garner_substituted",
        corr="results/linear_correction.json",
        utils=workflow.source_path("notebooks/utils.py"),
    output:
        params="results/params/garner.yml",
        variables="results/variables/garner.yml",
        figure_gaps="results/figures/garner_gaps.pdf",
        table_gaps="results/tables/garner_gaps.md",
    log:
        notebook="logs/notebooks/garner.ipynb",
    conda:
        "envs/coulson.yml"
    notebook:
        "notebooks/garner.ipynb"


rule global:
    input:
        data="results/rational_design.csv",
        reference="data/reference/rational_design.csv",
        utils=workflow.source_path("notebooks/utils.py"),
    output:
        corr="results/linear_correction.json",
        figure_global_all_gaps="results/figures/global_all_gaps.pdf",
        table_global_all_gaps="results/tables/global_all_gaps.md",
        figure_global_all="results/figures/global_all.pdf",
        figure_global_scaffolds_gap="results/figures/global_scaffolds_gaps.png",
        table_global_scaffolds="results/tables/global_scaffolds.md",
        table_global_scaffolds_oscillator="results/figures/global_scaffolds_oscillator.png",
        figure_global_scaffolds_singlet="results/figures/global_scaffolds_singlet.png",
        figure_global_scaffolds_triplet="results/figures/global_scaffolds_triplet.png",
        params="results/params/global.yml",
        variables="results/variables/global.yml",
    log:
        notebook="logs/notebooks/global.ipynb",
    conda:
        "envs/coulson.yml"
    notebook:
        "notebooks/global.ipynb"


rule negative:
    input:
        azaphenalenes="results/azaphenalenes.csv",
        azaphenalenes_ref="data/reference/azaphenalenes.csv",
        azulenes="results/azulenes.csv",
        azulenes_ref="data/reference/azulenes.csv",
        rational_design="results/rational_design.csv",
        rational_design_ref="data/reference/rational_design.csv",
        utils=workflow.source_path("notebooks/utils.py"),
    output:
        params="results/params/negative.yml",
        variables="results/variables/negative.yml",
        figure_negative_all="results/figures/negative_all.pdf",
        figure_negative_scaffolds="results/figures/negative_scaffolds.png",
        table_negative="results/tables/negative.md",
    log:
        notebook="logs/notebooks/negative.ipynb",
    conda:
        "envs/coulson.yml"
    notebook:
        "notebooks/negative.ipynb"


rule time:
    input:
        data="results/rational_design.csv",
    output:
        variables="results/variables/time.yml",
    log:
        notebook="logs/notebooks/time.ipynb",
    conda:
        "envs/coulson.yml"
    notebook:
        "notebooks/time.ipynb"


rule local:
    input:
        azaphenalenes="results/azaphenalenes.csv",
        azaphenalenes_ref="data/reference/azaphenalenes.csv",
        azulenes="results/azulenes.csv",
        azulenes_ref="data/reference/azulenes.csv",
        corr="results/linear_correction.json",
        utils=workflow.source_path("notebooks/utils.py"),
    output:
        figure_azaphenalenes="results/figures/local_azaphenalenes.pdf",
        figure_azulenes="results/figures/local_azulenes.pdf",
        figure_corr="results/figures/local_corr.pdf",
        table_azaphenalenes="results/tables/local_azaphenalenes.md",
        table_azulenes="results/tables/local_azulenes.md",
        params="results/params/local.yml",
        variables="results/variables/local.yml",
    log:
        notebook="logs/notebooks/local.ipynb",
    conda:
        "envs/coulson.yml"
    notebook:
        "notebooks/local.ipynb"


rule qualitative:
    input:
        path_azaphenalene="resources/xyz/azaphenalenes",
        azaphenalene_ref="data/reference/azaphenalenes.csv",
        path_pentalene="resources/xyz/rational_design",
        pentalene_ref="data/reference/rational_design.csv",
        utils=workflow.source_path("notebooks/utils.py"),
    output:
        azaphenalene_orbitals="results/figures/azaphenalene_orbitals.png",
        azaphenalene_excitations="results/figures/azaphenalene_excitations.png",
        pentalene_orbitals="results/figures/pentalene_orbitals.png",
        pentalene_excitations="results/figures/pentalene_excitations.png",
        pentalene_ideal_orbitals="results/figures/pentalene_ideal_orbitals.png",
        pentalene_ideal_excitations="results/figures/pentalene_ideal_excitations.png",
        variables="results/variables/qualitative.yml",
    log:
        notebook="logs/notebooks/qualitative.ipynb",
    conda:
        "envs/coulson.yml"
    notebook:
        "notebooks/qualitative.ipynb"


rule calculate_opt:
    input:
        path="data/reference/azaphenalenes.csv",
        calculate=workflow.source_path("notebooks/calculate.py"),
    output:
        mmff=protected("results/azaphenalenes_mmff.csv"),
        gfnff=protected("results/azaphenalenes_gfnff.csv"),
        gfn2=protected("results/azaphenalenes_gfn2.csv"),
        ani=protected("results/azaphenalenes_ani1ccx.csv"),
        xyz_dir=directory("results/xyz/azaphenalenes"),
    log:
        progress="logs/opt.log",
        notebook="logs/notebooks/calculate_opt.ipynb",
    threads: workflow.cores
    conda:
        "envs/coulson.yml"
    notebook:
        "notebooks/calculate_opt.ipynb"


rule calculate_interpolation:
    input:
        path="resources/xyz/azaphenalenes",
        calculate=workflow.source_path("notebooks/calculate.py"),
    output:
        combined=protected("results/azaphenalenes_no_interpolation.csv"),
    log:
        progress="logs/azaphenalenes_no_interpolation.log",
        notebook="logs/notebooks/calculate_interpolation.ipynb",
    threads: workflow.cores
    conda:
        "envs/coulson.yml"
    notebook:
        "notebooks/calculate_interpolation.ipynb"


rule calculate_compounds:
    input:
        path="resources/xyz/{name}",
        calculate=workflow.source_path("notebooks/calculate.py"),
    output:
        combined=protected("results/{name}.csv"),
    log:
        progress="logs/{name}.log",
        notebook="logs/notebooks/calculate_compounds_{name}.ipynb",
    threads: workflow.cores
    conda:
        "envs/coulson.yml"
    notebook:
        "notebooks/calculate_compounds.ipynb"


rule extract_xyz:
    input:
        "data/xyz/{name}/xyz.tar.gz",
    output:
        directory("resources/xyz/{name}/"),
    shell:
        "mkdir -p {output} && tar -xf {input} -C {output}"
